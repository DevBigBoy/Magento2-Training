<?php
/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

declare(strict_types=1);

namespace Bigboy\UpdateCustomer\Model\Customer;

use Magento\Customer\Api\Data\CustomerInterface;
use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Framework\GraphQl\Exception\GraphQlAlreadyExistsException;
use Magento\Framework\GraphQl\Exception\GraphQlAuthenticationException;
use Magento\Framework\GraphQl\Exception\GraphQlInputException;
use Magento\Framework\GraphQl\Exception\GraphQlNoSuchEntityException;
use Magento\Framework\Api\DataObjectHelper;
use Magento\Store\Api\Data\StoreInterface;
use Magento\CustomerGraphQl\Model\Customer\ValidateCustomerData;
use Magento\CustomerGraphQl\Model\Customer\SaveCustomer;
use Magento\Customer\Api\CustomerRepositoryInterface;
use Magento\Customer\Model\CustomerRegistry;
use Magento\Framework\Encryption\EncryptorInterface;

/**
 * Update customer account data
 *
 * @SuppressWarnings(PHPMD.CouplingBetweenObjects) - https://jira.corp.magento.com/browse/MC-18152
 */
class UpdateCustomerAccount
{
    /**
     * @var SaveCustomer
     */
    private $saveCustomer;

    /**
     * @var DataObjectHelper
     */
    private $dataObjectHelper;

    /**
     * @var ValidateCustomerData
     */
    private $validateCustomerData;

    /**
     * @var array
     */
    private $restrictedKeys;
    private CustomerRegistry $customerRegistry;
    private CustomerRepositoryInterface $customerRepository;
    private EncryptorInterface $encryptor;


    public function __construct(
        SaveCustomer $saveCustomer,
        DataObjectHelper $dataObjectHelper,
        ValidateCustomerData $validateCustomerData,
        CustomerRegistry $customerRegistry,
        CustomerRepositoryInterface $customerRepository,
        EncryptorInterface $encryptor,
        array $restrictedKeys = []
    ) {
        $this->saveCustomer = $saveCustomer;
        $this->dataObjectHelper = $dataObjectHelper;
        $this->restrictedKeys = $restrictedKeys;
        $this->validateCustomerData = $validateCustomerData;
        $this->customerRegistry = $customerRegistry;
        $this->customerRepository = $customerRepository;
        $this->encryptor = $encryptor;
    }

    /**
     * Update customer account
     *
     * @param CustomerInterface $customer
     * @param array $data
     * @param StoreInterface $store
     * @return void
     * @throws GraphQlAlreadyExistsException
     * @throws GraphQlAuthenticationException
     * @throws GraphQlInputException
     * @throws GraphQlNoSuchEntityException
     * @throws NoSuchEntityException
     * @throws LocalizedException
     */
    public function execute(CustomerInterface $customer, array $data, StoreInterface $store): void
    {
        if (isset($data['email']) && $customer->getEmail() !== $data['email']) {
            if (empty($data['password'])) {
                throw new GraphQlInputException(__('Provide the New Password For Your Email.'));
            }

            $customer->setEmail($data['email']);
        }

        $this->validateCustomerData->execute($data);
        $filteredData = array_diff_key($data, array_flip($this->restrictedKeys));
        $this->dataObjectHelper->populateWithArray($customer, $filteredData, CustomerInterface::class);

        try {
            $customer->setStoreId($store->getId());
        } catch (NoSuchEntityException $exception) {
            throw new GraphQlNoSuchEntityException(__($exception->getMessage()), $exception);
        }

        $this->saveCustomer->execute($customer);


        $newPasswordHash = $this->encryptor->getHash($data['password'], true);

        $customer = $this->customerRepository->getById($customer->getId());
        $customerSecure = $this->customerRegistry->retrieveSecureData($customer->getId());
        $customerSecure->setPasswordHash($newPasswordHash);
        $this->customerRepository->save($customer);

    }
}
